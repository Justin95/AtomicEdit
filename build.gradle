apply plugin: 'java'
apply plugin: 'application'

mainClassName = "Main"

def atomicEditVersion = "0.2.0"

def lwjglVersion = "3.2.3" //also dependency of legui
def leguiVersion = "3.3.0-SNAPSHOT"

repositories {
    mavenCentral()
    jcenter()
    maven {
        name = "Releases"
        url = "https://raw.github.com/LiquidEngine/repo/releases"
    }
    maven {
        name = "Snapshots"
        url = "https://raw.github.com/LiquidEngine/repo/snapshots"
    }
    maven {
        name = "Develop"
        url = "https://raw.github.com/LiquidEngine/repo/develop"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    //noise library for noise operation
    maven {
        url 'https://repo.spongepowered.org/maven/'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile "org.lwjgl:lwjgl:$lwjglVersion"
    compile "org.liquidengine:legui:$leguiVersion"
    
    ["natives-windows", "natives-linux", "natives-macos"].each { lwjglNatives ->
        compile "org.lwjgl:lwjgl:${lwjglVersion}:${lwjglNatives}"
        compile "org.lwjgl:lwjgl-tinyfd:${lwjglVersion}:${lwjglNatives}"
    }
    //noise library for noise operation
    implementation 'org.spongepowered:noise:2.0.0-SNAPSHOT'
    //okhttp for checking github to inform the user of newer released versions
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.9'
    testCompile 'junit:junit:4.12'
}

jar {
    //destinationDirectory = buildDir
    baseName = "AtomicEdit_" + "$atomicEditVersion"
    manifest{
        attributes "Main-Class": "Main"
    }
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it) 
        }
    }
}


processResources {
    def replace = { replaceMap ->
        return { line ->
            def newLine = line
            replaceMap.each { matchRegex, replaceStr ->
                if (line =~ matchRegex) {
                    newLine =  replaceStr
                }
            }
            return newLine
        }
    }
    filesMatching('version.txt', { file ->
        file.filter(replace([
            "atomicedit_version" : atomicEditVersion
        ]))
    })
}
